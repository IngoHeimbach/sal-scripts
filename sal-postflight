#!/usr/bin/python
#
#    postflight
#        Submits inventory to an instance of Sal
#

import sys
sys.path.append('/usr/local/sal')

import urllib
import urllib2
import uuid
# try to import from the default place Munki installs it
try:
    from munkilib import FoundationPlist
    from munkilib import munkicommon
except:
    sys.path.append('/usr/local/munki')
    from munkilib import FoundationPlist
    from munkilib import munkicommon
from Foundation import *
import subprocess
import base64
import yaml
import bz2
import os
import sys
import optparse
import json
import utils
import tempfile
import hashlib

BUNDLE_ID = 'com.github.salopensource.sal'
default_debug = False
VERSION = '0.7.5'

def get_disk_size(path='/'):
    """Returns total disk size in KBytes.

    Args:
      path: str, optional, default '/'
    Returns:
      int, KBytes in total disk space
    """
    if path is None:
        path = '/'
    try:
        st = os.statvfs(path)
    except OSError, e:
        display_error(
            'Error getting disk space in %s: %s', path, str(e))
        return 0
    total = (st.f_blocks * st.f_frsize) / 1024
    return int(total)


def getconsoleuser():
    """Return console user"""
    from SystemConfiguration import SCDynamicStoreCopyConsoleUser
    cfuser = SCDynamicStoreCopyConsoleUser( None, None, None )
    return cfuser[0]


usage = "%prog [options]"
o = optparse.OptionParser(usage=usage)

o.add_option("--debug",
        default=default_debug, action="store_true",
        help=("Enable debug output. "))

opts, args = o.parse_args()
debug = opts.debug

# read in the serverURL
ServerURL = utils.pref('ServerURL')
if ServerURL.endswith('/'):
    ServerURL = ServerURL[:-1]
checkinurl = ServerURL+'/checkin/'
# read in the BU Key
bu_key = utils.pref('key')
if bu_key == None:
    print 'Sal Key isn\'t set.'
    sys.exit(1)

# Set the run uuid
run_uuid = uuid.uuid4()
# read in Munki Report
report = FoundationPlist.readPlist('/Library/Managed Installs/ManagedInstallReport.plist')
if debug:
    print 'DEBUG: ManagedInstallReport.plist'
    print report
# generate system profiler report
command = ['system_profiler', '-xml', 'SPNetworkDataType', 'SPHardwareDataType']
task = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = task.communicate()
system_profile = FoundationPlist.readPlistFromString(stdout)

try:
    f = open('/var/lib/puppet/state/last_run_summary.yaml', 'r')
    puppetreport = yaml.load(f.read())
    report['Puppet'] = puppetreport

    if report['Puppet']['version']['config'] == None:
        report['Puppet']['version']['config'] = 'None'

    if debug:
        print 'DEBUG: Puppet Report'
        print report['Puppet']
except:
    pass

if os.path.isfile('/var/log/osquery/osqueryd.results.log'):
    osquery = []
    counter = 0
    with open('/var/log/osquery/osqueryd.results.log') as f:
        for line in f.readlines():
            if 'logfile turned over due to size' in line and counter == 0:
                continue
            if 'diffResults' not in json.loads(line):
                print 'osquery logs are not in the correct format. Use "log_result_events": "false" in your settings.'
            else:
                osquery.append(json.loads(line))
            counter = counter + 1
        report['osquery'] = osquery
else:
    print 'Not using osquery'

# Merge the system profiler report into the Munki report
if not 'MachineInfo' in report:
    report['MachineInfo'] = {}
report['MachineInfo']['SystemProfile'] = system_profile
if debug:
    print 'DEBUG: System Profile'
    print report['MachineInfo']['SystemProfile']

# Set the FACTERLIB environment variable if it's not already what we want it to be.
desiredfacter = '/usr/local/sal/facter'

facterlib = os.environ.get('FACTERLIB')
facterflag = False
if facterlib:
    if desiredfacter not in facterlib:
        # set the flag to true, we need to put it back
        facterflag = True
os.environ['FACTERLIB'] = desiredfacter

# if Puppet is installed, get it's verion
puppetpath = None

if os.path.exists('/usr/bin/puppet'):
    puppetpath = '/usr/bin/puppet'
elif os.path.exists('/opt/puppetlabs/bin/puppet'):
    puppetpath = '/opt/puppetlabs/bin/puppet'
if puppetpath:
    try:
        command = [puppetpath, '--version']
        task = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = task.communicate()
        if stdout:
            report['Puppet_Version'] = stdout
    except:
        print stderr

# if Facter is installed, perform a run
facterpath = None
if os.path.exists('/usr/bin/facter'):
    facterpath = '/usr/bin/facter'
elif os.path.exists('/opt/puppetlabs/bin/facter'):
    puppetpath = '/opt/puppetlabs/bin/facter'

if facterpath:
    try:
        command = [facterpath, '--puppet', '--yaml']
        task = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = task.communicate()
        if stdout:
            facter = yaml.load(stdout)
            report['Facter'] = facter
            if debug:
                print 'DEBUG: Facter Output'
                print report['Facter']
    except:
        print stderr

# Get the serial number
try:
    serial = report['MachineInfo']['serial_number']
except:
    print 'Unable to get MachineInfo from ManagedInstallReport.plist. This is usually due to running Munki in Apple Software only mode.'
    sys.exit(0)

# Get Machine Name
command = ['/usr/sbin/scutil', '--get', 'ComputerName']
task = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = task.communicate()
name = stdout
data = {}

# Set the OS family
report['os_family'] = 'Darwin'

# Compress the report
plist = FoundationPlist.writePlistToString(report)
if debug:
    print 'DEBUG: Final Report'
    print plist

zipped = bz2.compress(plist)

data['base64bz2report'] = base64.b64encode(zipped)
data['serial'] = serial
data['key'] = bu_key
data['name'] = name
data['disk_size'] = get_disk_size('/')
data['sal_version'] = VERSION
data['run_uuid'] = run_uuid

urldata = urllib.urlencode(data)

(stdout, stderr) = utils.curl(checkinurl, urldata)
if stderr:
    print checkinurl
    print stderr
print stdout

data = {}
data['serial'] = serial.upper()
data['key'] = bu_key
data['name'] = name
data['disk_size'] = get_disk_size('/')
data['sal_version'] = VERSION
data['run_uuid'] = run_uuid
hashurl = ServerURL+'/inventory/hash/'+serial+'/'
inventorysubmiturl = ServerURL+'/inventory/submit/'
inventoryplist = '/Library/Managed Installs/ApplicationInventory.plist'
serverhash = None
if os.path.isfile(inventoryplist):
    f = open(inventoryplist).read()
    inventoryhash = hashlib.sha256(f).hexdigest()
    (serverhash, stderr) = utils.curl(hashurl)

    if serverhash != inventoryhash:
        #inventorydata = FoundationPlist.writePlistToString(FoundationPlist.readPlist(inventoryplist))
        inventorydata = open(inventoryplist).read()
        data['base64bz2inventory'] = base64.b64encode(bz2.compress(inventorydata))
        urldata = urllib.urlencode(data)
        (stdout, stderr) = utils.curl(inventorysubmiturl, urldata)
        if stderr:
            print inventorysubmiturl
            print stderr
        print stdout

data = {}
data['serial'] = serial.upper()
data['key'] = bu_key
data['name'] = name
data['disk_size'] = get_disk_size('/')
data['sal_version'] = VERSION
data['run_uuid'] = run_uuid

hashurl = ServerURL+'/installlog/hash/'+serial+'/'
installlogsubmiturl = ServerURL+'/installlog/submit/'
managed_install_dir = munkicommon.pref('ManagedInstallDir')
installlog = os.path.join(managed_install_dir, 'Logs','Install.log')
serverhash = None

if os.path.isfile(installlog):
    f = open(installlog).read()
    localhash = hashlib.sha256(f).hexdigest()
    (serverhash, stderr) = utils.curl(hashurl)

    if serverhash != localhash or stderr != None:
        data['base64bz2installlog'] = base64.b64encode(bz2.compress(f))
        urldata = urllib.urlencode(data)
        (stdout, stderr) = utils.curl(installlogsubmiturl, urldata)
        if stderr:
            print installlogsubmiturl
            print stderr
        print stdout

# Catalogs
hashurl = ServerURL+'/catalog/hash/'
catalogsubmiturl = ServerURL+'/catalog/submit/'
catalog_dir = os.path.join(managed_install_dir, 'catalogs')
check_list = []
if os.path.exists(catalog_dir):
    for file in os.listdir(catalog_dir):
        # don't operate on hidden files (.DS_Store etc)
        if not file.startswith('.'):
            f = open(os.path.join(catalog_dir, file)).read()
            catalog_hash = hashlib.sha256(f).hexdigest()
            check_list.append({'name': file, 'sha256hash':catalog_hash})
    data = {}
    check_plist = FoundationPlist.writePlistToString(check_list)
    data['catalogs'] = base64.b64encode(bz2.compress(check_plist))
    data['serial'] = serial
    data['key'] = bu_key
    data['sal_version'] = VERSION
    data['run_uuid'] = run_uuid
    urldata = urllib.urlencode(data)
    (catalog_out, stderr) = utils.curl(hashurl, urldata)
    try:
        catalog_data = FoundationPlist.readPlistFromString(catalog_out)
    except:
        catalog_data = {}

    data = {}
    data['serial'] = serial
    data['key'] = bu_key
    data['sal_version'] = VERSION
    data['run_uuid'] = run_uuid
    for remote_item in catalog_data:
        for stored_item in check_list:
            if stored_item['name'] == remote_item['name']:
                if stored_item['sha256hash'] != remote_item['sha256hash']:
                    f = open(os.path.join(catalog_dir, stored_item['name'])).read()
                    data['base64bz2catalog'] = base64.b64encode(bz2.compress(f))
                    data['name'] = stored_item['name']
                    urldata = urllib.urlencode(data)
                    (stdout, stderr) = utils.curl(catalogsubmiturl, urldata)
                    if stderr:
                        print catalogsubmiturl
                        print stderr
                    if stdout:
                        print stdout
# cleanup
if facterflag:
    os.environ['FACTERLIB'] = facterlib
