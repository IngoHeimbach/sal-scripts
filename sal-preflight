#!/usr/bin/python
#
#    preflight
#        Retrieves queries to run in osquery
#

import errno
import sys
sys.path.append('/usr/local/sal')
import sys
import subprocess
from Foundation import *
import utils
import tempfile
import shutil
import os
import json


def is_exe(fpath):
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def main():
    # Test if osqueryi is installed. No point continuing if not.
    if not is_exe('/usr/local/bin/osqueryi'):
        sys.exit(0)

    # Get the SalURL from the prefs
    sal_url = utils.pref('ServerURL')
    preflighturl = sal_url + '/preflight/'
    # Get the name of the launchdaemon from the prefs
    launchd_name = utils.pref('osquery_launchd')
    launchd_path = '/Library/LaunchDaemons/' + launchd_name

    (stdout, stderr) = utils.curl(preflighturl)
    if stderr:
        print stderr
    if len(stdout) != 0:
        # validate the json
        try:
            json.loads(stdout)
        except:
            sys.exit(0)

        print 'OSQuery configuration recieved'
        print stdout
        # Make the directories if needed
        mkdir_p('/private/var/log/osquery')
        mkdir_p('/private/var/osquery/sal_packs')

        # Write out the osquery pack
        if os.path.exists('/private/var/osquery/sal_packs/sal.conf'):
            os.remove('/private/var/osquery/sal_packs/sal.conf')

        with open("/private/var/osquery/sal_packs/sal.conf", "w") as conf_file:
            conf_file.write(stdout)
        # stop and reload the launchdaemon for osquery
        subprocess.call(['/bin/launchctl', 'unload', launchd_path])
        subprocess.call(['/bin/launchctl', 'load', launchd_path])

if __name__ == '__main__':
    main()
